import os.path
import numpy as np
import PIL.Image
import PIL.ImageStat
import hashlib
import shutil
from glob import glob


def validate_images(input_dir, output_dir, log_file, formatter="06d"):
    image_files = sorted(glob(os.path.join(os.path.join(os.path.abspath(input_dir), "**"), "*.*"), recursive=True))
    output_dir = os.path.abspath(output_dir)
    os.makedirs(output_dir, exist_ok=True)
    os.makedirs(os.path.dirname(log_file), exist_ok=True)
    log_file_id = open(log_file, 'w+')
    image_count = 0
    image_list = []
    for image_number, image_look in enumerate(image_files):
        error_list = []
        if image_look.endswith(('.jpg', '.JPG', '.JPEG', '.jpeg')):
            pass
        elif os.path.isfile(image_look):
            error_list.append('1')
        if os.path.getsize(image_look) > 250000:
            error_list.append('2')
        try:
            if not os.path.isfile(image_look):
                raise TypeError
            my_image = PIL.Image.open(image_look)
            width, height = my_image.size
            if width >= 96 and height >= 96 and my_image.mode == "RGB":
                pass
            else:
                error_list.append('4')
            my_image_var = PIL.ImageStat.Stat(my_image)
            if sum(my_image_var.var) > 0:
                pass
            else:
                error_list.append('5')
            array_hash = hashlib.sha256(bytes(np.array(my_image).tobytes())).hexdigest()
            if array_hash in image_list:
                error_list.append('6')
        except (FileNotFoundError, PIL.UnidentifiedImageError, ValueError, TypeError):
            error_list.append('3')
        if len(error_list):
            log_file_id.write(os.path.basename(image_look) + ';' + error_list[0] + '\n')
        else:
            file_name = str(image_count).zfill(int(formatter[1])) + ".jpg"
            shutil.copy(image_look, os.path.join(output_dir, file_name))
            image_list.append(array_hash)
            image_count += 1
    log_file_id.close()
    return image_count
